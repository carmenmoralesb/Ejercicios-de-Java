import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author carmenm
 */

public class Principal extends javax.swing.JFrame {
        private Connection conn;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.cmb1.setModel(new DefaultComboBoxModel());
        this.tbl1.setModel(new DefaultTableModel());
        
        this.conn = null;
        // Es necesario controlar SQLException
        try {
            // Se crea la conexión con la BD
            this.conn = DriverManager.getConnection("jdbc:mysql://localhost/bd_mundo?useUnicode=true&characterEncoding=UTF-8","root","root");
    
            System.out.println("Correcto!!!");
            // Los botones esta inhabilitados (enabled=false) inicialmente y se vuelven a habilitar si la conexión es correcta
        }
        
        catch (SQLException ex) {
            // handle any errors
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        cmb1 = new javax.swing.JComboBox<>();
        btnVerConti = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl1 = new javax.swing.JTable();
        btnIdiom = new javax.swing.JCheckBox();
        btnMaspobl = new javax.swing.JCheckBox();
        txtPais = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnFronts = new javax.swing.JCheckBox();
        btnOrdPob = new javax.swing.JCheckBox();
        btnKMFRONT = new javax.swing.JCheckBox();
        btnIdiomCont = new javax.swing.JCheckBox();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setText("WORLD DB");

        cmb1.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        cmb1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb1ItemStateChanged(evt);
            }
        });
        cmb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb1ActionPerformed(evt);
            }
        });

        btnVerConti.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnVerConti.setText("Ver continentes");
        btnVerConti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerContiActionPerformed(evt);
            }
        });

        tbl1.setAutoCreateRowSorter(true);
        tbl1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        tbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbl1);

        btnIdiom.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnIdiom.setText("Ver idiomas del país");
        btnIdiom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdiomActionPerformed(evt);
            }
        });

        btnMaspobl.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnMaspobl.setText("Ver país con más población y el más grande");
        btnMaspobl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaspoblActionPerformed(evt);
            }
        });

        txtPais.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        btnBuscar.setFont(new java.awt.Font("Calibri", 1, 10)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnFronts.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnFronts.setText("Ver fronteras del pais");
        btnFronts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFrontsActionPerformed(evt);
            }
        });

        btnOrdPob.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnOrdPob.setText("Ordenar todos los paises por densidad de población");
        btnOrdPob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdPobActionPerformed(evt);
            }
        });

        btnKMFRONT.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnKMFRONT.setText("Ver km de frontera");
        btnKMFRONT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKMFRONTActionPerformed(evt);
            }
        });

        btnIdiomCont.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        btnIdiomCont.setText("Ver idiomas del continente");
        btnIdiomCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdiomContActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVerConti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnKMFRONT)
                        .addGap(18, 18, 18)
                        .addComponent(btnIdiomCont))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPais, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(btnIdiom)
                                .addGap(18, 18, 18)
                                .addComponent(btnFronts))
                            .addComponent(btnOrdPob)
                            .addComponent(btnMaspobl)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerConti)
                    .addComponent(btnKMFRONT)
                    .addComponent(btnIdiomCont))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIdiom)
                    .addComponent(btnFronts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMaspobl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOrdPob)
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerContiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerContiActionPerformed
        
        List <String> listaConti= new ArrayList<String>();            
        String query = String.format("SELECT continente FROM continentes");  
        int c=0;
        
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            //******
            //String resultado = "";
            // Recorrido del resultset
            while(rs.next()){
                //c++;
                listaConti.add(rs.getString("continente"));
            }
            
            //txtResultado.setText(resultado);
            //lblInformacion.setText(String.format("Contactos: %d", c));
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }

        for (String elemento : listaConti) {
            cmb1.addItem(elemento); 
    }    

    }//GEN-LAST:event_btnVerContiActionPerformed

    private void cmb1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb1ItemStateChanged

        mostrar();
    }//GEN-LAST:event_cmb1ItemStateChanged

    private void cmb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb1ActionPerformed

        
    }//GEN-LAST:event_cmb1ActionPerformed

    private void mostrar() {
        String seleccionado = (String)cmb1.getSelectedItem();          
        String query = String.format("SELECT p.pais,p.capital, IFNULL(p.extension,'Desconocido'), IFNULL(p.poblacion,'Desconocido'),p.moneda FROM paises p,continentes c WHERE p.continente_id = c.id and c.continente = '%s'",seleccionado);    
        
        int c=0; 
        System.out.println(query);

        
        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("Capital");
            modelo.addColumn("Extensión");
            modelo.addColumn("Población");
            modelo.addColumn("Moneda");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
                  while (rs.next()){
                      Object dato[]=new  Object[5];
                      for (int i=0; i<5; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
            
            //txtResultado.setText(resultado);
            //lblInformacion.setText(String.format("Contactos: %d", c));
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
    }
    
    private void btnIdiomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdiomActionPerformed

        int columna = 0;
        int fila = tbl1.getSelectedRow();
        String paiselec = tbl1.getModel().getValueAt(fila, columna).toString();
        //System.out.println(value);


        String query = "SELECT i.idioma FROM idiomas AS i,paises_idiomas AS pi, paises AS p WHERE i.id = pi.idioma_id AND pi.pais_id = p.id AND p.pais LIKE '" + "%" + paiselec + "%'"; 
        
        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        int c=0; 
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
            // Iterar por las columnas
            // meter las filas en la tabla
            // segun el indice
            
            while (rs.next()){
                      Object dato[]=new  Object[1];
                      for (int i=0; i<1; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
            catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }

    }//GEN-LAST:event_btnIdiomActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String seleccionado = (String)(txtPais.getText());  
        String seleccionado2 = (String)cmb1.getSelectedItem();          

        String query = "SELECT p.pais,p.capital, IFNULL(p.extension,'Desconocido') ,IFNULL(p.poblacion,'Desconocido') FROM paises p,continentes c WHERE p.continente_id = c.id AND c.continente = '" + seleccionado2 + "' AND p.pais LIKE '" + "%" + seleccionado + "%'";    

        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        
        int c=0; 
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("Capital");
            modelo.addColumn("Extensión");
            modelo.addColumn("Población");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
            while (rs.next()){
                      Object dato[]=new  Object[4];
                      for (int i=0; i<4; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
           catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnMaspoblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaspoblActionPerformed
 
        String query = "SELECT p.pais,p.capital,p.extension, p.poblacion FROM paises p,continentes c WHERE p.continente_id = c.id ORDER BY p.poblacion DESC LIMIT 1";    

        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        
        int c=0; 
        
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("Capital");
            modelo.addColumn("Extensión");
            modelo.addColumn("Población");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
            while (rs.next()){
                      Object dato[]=new  Object[4];
                      for (int i=0; i<4; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
            catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }
        
        String query2 = "SELECT p.pais,p.capital,p.extension,p.poblacion FROM paises p,continentes c WHERE p.continente_id = c.id ORDER BY p.extension DESC LIMIT 1";    

        int a =0; 
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query2);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            a = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
            while (rs.next()){
                      Object dato[]=new  Object[4];
                      for (int i=0; i<4; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
            catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }
    }//GEN-LAST:event_btnMaspoblActionPerformed

    private void btnFrontsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFrontsActionPerformed

        int columna = 0;
        int fila = tbl1.getSelectedRow();
        String paiselec = tbl1.getModel().getValueAt(fila, columna).toString();
        //System.out.println(value);

        String query = String.format("select p.pais,p.capital, IFNULL(p.extension,'Desconocido'), IFNULL(p.poblacion,'Desconocido') FROM paises AS p,paises_vecinos AS pv WHERE pv.vecino_id = p.id AND PV.pais_id = (SELECT id FROM paises WHERE pais = '%s')",paiselec);

        
        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        int c=0; 
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("Capital");
            modelo.addColumn("Extensión");
            modelo.addColumn("Población");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
            while (rs.next()){
                      Object dato[]=new  Object[4];
                      for (int i=0; i<4; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
        
            catch (ArrayIndexOutOfBoundsException e) {
                  mostrar();
            }
       
    }//GEN-LAST:event_btnFrontsActionPerformed

    private void btnOrdPobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdPobActionPerformed

        //System.out.println(value);

        
        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();
        
        // Creo que este calculo esta mal auqnue la formula para calcularlo es correcta
        // densidad = poblacion / extension
        
        String query ="SELECT p.pais, IFNULL(p.poblacion,'Desconocido'), IFNULL(p.extension,'Desconocido'), IFNULL((p.poblacion/p.extension),0) AS densidad FROM paises AS p ORDER BY densidad DESC";
        System.out.println(query);

        int c=0; 
        
        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("Población");
            modelo.addColumn("Extensión");
            modelo.addColumn("Densidad");

            while (rs.next()){
                      Object dato[]=new  Object[4];
                      for (int i=0; i<4; i++){
                          dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
           
    }//GEN-LAST:event_btnOrdPobActionPerformed

    private void btnKMFRONTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKMFRONTActionPerformed
        String seleccionado = (String)cmb1.getSelectedItem();          
        String query = String.format("SELECT p.pais,IFNULL(p.costa,'Desconocido') AS sumacosta, IFNULL(SUM(pv.kms_frontera),'Desconocido') AS sumafront FROM paises AS p, paises_vecinos AS pv, continentes AS c WHERE c.id = p.continente_id AND p.id = pv.pais_id and c.continente = '%s'GROUP BY p.pais",seleccionado);
        
        int c=0; 
        System.out.println(query);

        
        DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        tbl1.repaint();

        try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("Nombre");
            modelo.addColumn("KM costa");
            modelo.addColumn("KM Frontera");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
             while (rs.next()){
                    Object dato[]=new  Object[3];
                    for (int i=0; i<3; i++){
                        dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
            
            //txtResultado.setText(resultado);
            //lblInformacion.setText(String.format("Contactos: %d", c));
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
            catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }
    }//GEN-LAST:event_btnKMFRONTActionPerformed

    private void btnIdiomContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdiomContActionPerformed
       String seleccionado = (String)cmb1.getSelectedItem();          
       String query = String.format("SELECT p.pais,i.idioma FROM paises AS p,continentes AS c,idiomas as i,paises_idiomas AS pi WHERE c.id = p.continente_id AND p.id = pi.pais_id AND i.id = idioma_id AND c.continente = '%s'",seleccionado);
        
       int c=0; 
       System.out.println(query);
 
       DefaultTableModel modelo = (DefaultTableModel) tbl1.getModel();
       modelo.setRowCount(0);
       modelo.setColumnCount(0);
       tbl1.repaint();

       try {
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            // Para calcular el total de final de la consulta
            rs.last(); // Se posiciona en la última fila de la consulta
            c = rs.getRow(); // Extrae el número de fila
            rs.beforeFirst(); // Se vuelve a la posición inicial
            
            modelo.addColumn("País");
            modelo.addColumn("Idioma");
            
            //******
            //String resultado = "";
            // Recorrido del resultset
            
             while (rs.next()){
                    Object dato[]=new  Object[2];
                    for (int i=0; i<2; i++){
                        dato[i]=rs.getString(i+1);
                      }
               modelo.addRow(dato);
                  }
                  
            
            //txtResultado.setText(resultado);
            //lblInformacion.setText(String.format("Contactos: %d", c));
        }   catch (SQLException ex) {
                   ex.printStackTrace();
        }
       
            catch (ArrayIndexOutOfBoundsException e) {
                mostrar();
            }
    }//GEN-LAST:event_btnIdiomContActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JCheckBox btnFronts;
    private javax.swing.JCheckBox btnIdiom;
    private javax.swing.JCheckBox btnIdiomCont;
    private javax.swing.JCheckBox btnKMFRONT;
    private javax.swing.JCheckBox btnMaspobl;
    private javax.swing.JCheckBox btnOrdPob;
    private javax.swing.JButton btnVerConti;
    private javax.swing.JComboBox<String> cmb1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl1;
    private javax.swing.JTextField txtPais;
    // End of variables declaration//GEN-END:variables
}
